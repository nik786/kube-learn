 location /app1 {
            proxy_pass  http://app1:8080/v1;
            proxy_set_header	Host        	$host;
       	    proxy_set_header	X-Real-IP   	$remote_addr;
	    proxy_set_header	X-Forwarded-for $remote_addr;
	    port_in_redirect off;

        }

        This configuration snippet appears to be part of an NGINX configuration block, specifically for the /app1 location.

Let's break down each directive:

location /app1 { ... }: This defines a location block for requests with the URI path starting with /app1. NGINX will apply the directives 
within this block to requests that match this location.

proxy_pass http://app1:8080/v1;: This directive sets the backend server to which NGINX will proxy requests matching the /app1 location. 
In this case, it's proxying requests to http://app1:8080/v1.

proxy_set_header Host $host;: This directive sets the value of the Host header to the value of the $host variable. 
The $host variable contains the hostname from the request.

proxy_set_header X-Real-IP $remote_addr;: This directive sets the value of the X-Real-IP header to the value of the $remote_addr variable. 
The $remote_addr variable contains the IP address of the client.

proxy_set_header X-Forwarded-for $remote_addr;: This directive sets the value of the X-Forwarded-for header to the value of the $remote_addr variable. 
This header is typically used to forward the 
original client's IP address when requests pass through proxies or load balancers.

port_in_redirect off;: This directive disables port appending to the Location header in the responses from the backend server. 
It ensures that NGINX does not include the backend server's port in redirection responses, which can be useful when NGINX is behind a reverse proxy or load balancer.

Overall, this configuration block sets up NGINX to proxy requests with the URI path starting with /app1 to the backend server 
http://app1:8080/v1. It also forwards certain headers and disables port appending in redirection responses.

NS=$(kubectl get ns | grep Terminating | awk 'NR==1 {print $1}') && kubectl get namespace "$NS" -o json | tr -d "\n" 
| sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/" | kubectl replace --raw /api/v1/namespaces/$NS/finalize -f -



kubectl proxy:

The kubectl proxy command creates a proxy server on your local machine that forwards requests to the Kubernetes API server.
It establishes a secure tunnel between your local machine and the Kubernetes API server.
You can use kubectl proxy to access the Kubernetes API server and interact with Kubernetes resources, such as Pods, Services, 
Deployments, and ConfigMaps, using tools like curl or web browsers.
It does not directly expose individual Pods or Services to your local machine; instead, it provides access to the Kubernetes API server itself.
kubectl port-forward:

The kubectl port-forward command allows you to forward one or more ports from a Pod or Service to your local machine.
It establishes a direct connection between your local machine and the selected Pod or Service in the Kubernetes cluster.
You can use kubectl port-forward to access specific Pods or Services running inside the cluster from your local machine for debugging, 
troubleshooting, or interacting with them directly.
It exposes the specified ports on your local machine, allowing you to interact with the selected Pods or Services as if they were running locally.
In summary, kubectl proxy is primarily used to interact with the Kubernetes API server itself, while kubectl port-forward is used 
to forward ports from individual Pods or Services to 
your local machine for direct access and interaction.
