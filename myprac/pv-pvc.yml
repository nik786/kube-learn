What is Pv??
PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned 
by an administrator or dynamically provisioned using Storage Classes. 

What is Pvc??
A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by an administrator 
or dynamically provisioned using Storage Classes.

How to create a persistentvolumeclaim for existing vpc??

#Create PersistenceVolumeClaim from an existing PVC



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv6
spec:
  storageClassName: my-csi
  datasource:
    name: test-snap
    kind: PersistentVolumeClaim

  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi






How to Create a PersistentVolumeClaim from a Volume Snapshot??

#create pvc from VolumeSnapshot

apiVersion: v1
kind: PersistentvolumeClaim
metadata:
   name: pv5
spec:
  storageClassName:  csi-hostpath-sc
  dataSource:
    name:  new-test
    kind:  VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi





How to Create Pod specification adding Raw Block Device path in container??


How to PersistentVolume using a Raw Block Volume ??

apiVersion: apps/v1
kind: PersistentVolume
metadata:
  name: pv2
spec:
  capacity:
    storage: 2Gi
accessModes:
  - ReadWriteOnly      
volumeMode: Block
persistentVolumeReclaimpPolicy: Retain    
fc:
  WWNs: ["7899999"]
  lun: 0
  readonly: false      

How to PersistentVolumeClaim requesting a Raw Block Volume ??

apiVersion: v1
kind: PersistentStorage
metadata:
  name: pv-3
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: block
  resources:
    requests:
      storage: 1Gi



How to add Pod specification adding Raw Block Device path in container??

#Pod specification adding Raw Block Device path in container



apiVersion: v1
kind: Pod
metadata:
  name: nginx-pv-1
spec:
  containers:
  - image: nginx
    name: nginx-pv-1
    volumeDevices:
    - name: data
      devicePath: /dev/xvda
  volumes:
    - name: data
      persistentvolumeClaim:
        claimName:  block-pvc


How to add persistentetvolumeclaim in pod as volume??

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pv-1
spec:
  containers:
  - image: nginx
    name: nginx-pv-1
    volumeMounts:
    - mountPath: "/var/www/html"
      name: mypd
      
  volumes:
  - name: mypd
    persistentvolumeClaim:
      claimName: myclaim

##########################################################

Node Specfic Volume Limits


What is the kubernetes default limits for EBS??
Maximum volume per node: 39

What is the kubernetes default limits for GPD??
Maximum volume per node: 16

What is the kubernetes default limits for GPD??
Maximum volume per node: 16

You can change these limits by setting the value of the KUBE_MAX_PD_VOLS environment variable, and then starting the scheduler. 
CSI drivers might have a different procedure, see their documentation on how to customize their limits.


Dynamic volume limits??
Google Compute Engine, up to 127 volumes can be attached to a node
Amazon EBS disks on M5,C5,R5,T3 and Z1D instance types, Kubernetes allows only 25 volumes to be attached to a Node
On Azure, up to 64 disks can be attached to a node, depending on the node type
If a CSI storage driver advertises a maximum number of volumes for a Node (using NodeGetInfo),


###########

Ephemeral Volumes

Ephemeral volumes follow the Pod's lifetime and get created and deleted along with the Pod.
Pods can be stopped and restarted without being limited to where some persistent volume is available.

emptyDir:
configMap, downwardAPI, secret:
CSI ephemeral volumes:


Write a Pod manifest with CSI ephemeral storage

kind: Pod
apiVersion: v1
metadata:
  name: my-csi-app
spec:
  containers:
    - name: my-frontend
      image: busybox
      volumeMounts:
      - mountPath: "/data"
        name: my-csi-inline-vol
      command: [ "sleep", "1000000" ]
  volumes:
    - name: my-csi-inline-vol
      csi:
        driver: inline.storage.kubernetes.io
        volumeAttributes:
          foo: bar



Write a Pod manifest with Generic ephemeral volumes 



############
Storage Capacity


kubectl get csistoragecapacities --all-namespaces


#########

Dynamic Volume Provisioning

Dynamic volume provisioning allows storage volumes to be created on-demand
The implementation of dynamic volume provisioning is based on the API object StorageClass from the API group


Create a manifest for strogae class named slow which provisions standard disk-like persistent disks

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard


Create a manifest for strogae class named fast which provisions provisions SSD-like persistent disks.

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
  
  
  
Create a manifest for pvc with storage class fast   
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claim1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast
  resources:
    requests:
      storage: 30Gi
      
      
      

This claim results in an SSD-like Persistent Disk being automatically provisioned.
When the claim is deleted, the volume is destroyed.



#####cloning

How to clone existing pvc??

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: clone-of-pvc-1
    
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: cloning
  resources:
    requests:
      storage: 5Gi
  dataSource:
    kind: PersistentVolumeClaim
    name: pvc-1
    
    
    
#############

#VolumeSnapshots



    
    
#    


apiVersion: snapshot.storage.k8s.io/v1beata1
kind: VolumeSnapshotContent
metadata:
  name: pv
spec:
  deletionPolicy: delete
  driver: hostpath.csi.k8s.io
  source:
    snapshotHandle: 736474637254723
  volumesnapshotRef:
    name: new-snap



################


create persistentvolumeclaim

name: data-pvc
   namespace: web
   storageClassName: local-storage
   storage: 256Mi

create a pod mounting volume and write data to the volume
kubectl run data-pod --image=busybox --restart=Never -o yaml --dry-run --/bin/sh -c 'sleep 3600' > data-pod.yml


verify

  cp /etc/passwd /tmp/data/passwd
    
  ls /tmp/data/



####
Create pv for mongo

Cretae pvc for mongo



Write pod manifest  Mount /data/db to pvc



##

Write a pod manifest with emptydir

apiVersion: v1
kind: Pod
metadata:
  name: emptydir-pod
spec:
  containers:
  - image: busybox
    name: busybox
    command: ["/bin/sh", "-c", "while true; do sleep 3600; done"]
    volumeMounts:
    - mountPath: /tmp/storage
      name: vol
  volumes:
  - name: vol
    emptyDir: {}
    
    

 
    
    
#####

Your company needs a small database server to support a new application. 
They have asked you to deploy a pod running a MySQL container, 
but they want the data to persist even if the pod is deleted or replaced. 
Therefore, the MySQL database pod requires persistent storage.

You will need to do the following:

Create a PersistentVolume:
The PersistentVolume should be named mysql-pv.
The volume needs a capacity of 1Gi.
Use a storageClassName of localdisk.
Use the accessMode ReadWriteOnce.
Store the data locally on the node using a hostPath volume at the location /mnt/pg-data.
Create a PersistentVolumeClaim:
The PersistentVolumeClaim should be named mysql-pv-claim.
Set a resource request on the claim for 500Mi of storage.
Use the same storageClassName and accessModes as the PersistentVolume so that this claim can bind to the PersistentVolume.


apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  hostPath:
    path: "/mnt/pg-data"



---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests: 
      storage: 1Gi 









Create a MySQL Pod configured to use the PersistentVolumeClaim:
The Pod should be named mysql-pod.
Use the image mysql:5.6.
Expose the containerPort 3306.
Set an environment variable called MYSQL_ROOT_PASSWORD with the value password.
Add the PersistentVolumeClaim as a volume and mount it to the container at the path /var/lib/mysql.

apiVersion: v1
kind: Pod
metadata:
  name: mysql-uat
spec:
  containers:
  - image: mysql:5.6
    name: mysql-uat
    ports:
    - containerPort: 3306
      name: mysql-node
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: password  
    volumeMounts:
    - mountPath: /var/lib/mysql
      name: test-mq-container
  volumes:
  - name: test-mq-container
    persistentVolumeClaim:
      claimName: mysql-pvc










####
1. Create an index.html file on your Node
   mkdir /mnt/data
   sh -c "echo 'Hello from Kubernetes storage' > /mnt/data/index.html"
   
2.  Write pv,pvc manifest with hostpath and storage class
 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: test-ng-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/ng-data"




---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-ng-pvc
spec:
  accessModes:
    - ReadWriteOnce
  #storageClassName: local-storage
  resources:
    requests:
      storage: 100Mi

      
 3. Write pod manifest with created pvc 
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pv-4
spec:
  containers:
  - image: nginx
    name: nginx-pv-1
    ports:
      - containerPort: 80
        name: "http-node"
    volumeMounts:
    - mountPath: "/usr/share/nginx/html"
      name: test-ng-container
  volumes:
  - name: test-ng-container
    persistentVolumeClaim:
      claimName: test-ng-pvc


 
 
 
 kubectl exec -it nginx-pv-4 -- /bin/bash -c "apt-get update;apt-get install curl -y"
 
 kubectl exec -it nginx-pv-4 -- /bin/bash -c "curl http://localhost/"
 
 
 
 ##############
 #mongo
 create pv mongo-pv, pvc mongo-pvc  with hostpath "/mnt/mongo-data"
 
 apiVersion: v1
kind: PersistentVolume 
metadata: 
  name: mongo-pv
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo-data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

 
 
 
 
 write mongo pod name mongo-uat and container mongo-uat manifest with mongo-pvc and image mongo
 
 
 
 apiVersion: v1
kind: Pod
metadata:
  name: mongo-dev
spec:
  containers:
  - image: mongo
    name: mongo-dev
    ports:
      - containerPort: 27017
        name: "mongo-node"     
    volumeMounts:
    - mountPath: "/data/db"
      name: mongo-dock
  volumes:
  - name: mongo-dock
    persistentVolumeClaim:
      claimName:  mongo-pvc  
 
 
 
 
 
 
 
 
 
      
