1. Write a Network policy to deny all ingress network  traffic

cat deny-all.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress 
  namespace: np  
spec: 
  podSelector: {}
  policyTypes: 
    - Ingress  

##sucessfull

2. Write a Network policy to allow all ingress network traffic

cat no2.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress


3. Write a network policy to deny all egress traffic
cat n03.yml 
apiVersion: networking.k8s.io
kind: NetworkPolicy
metadata:
  name: deny-all-egress
spec:
  podSelector: {}
  policyTypes:
    - Egress



4. Write network policy to accept all egress traffic

cat n04.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  egress
  - {}
  policyTypes:
  - Egress 

5.Write Network policy to deny all ingress and egress traffic

cat n05.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress-egress
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress


6.
a. Create a nginx deployment 
   kubectl create namespace np
   kubectl create deployment nginx --image=nginx -n np
   
   
b. Create a service for the nginx deployment
   kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort -n np
   
c. Create mongo deployment 
   kubectl create deployment mongo --image=mongo -n np

d. Create a service for the mongo deployment
   kubectl expose deployment mongo --port=27017 --target-port=27017 --type=NodePort -n np

e. Create tomcat pod to test the connecivity of nginx and mongo deployment
   kubectl run tomcat --image=tomcat:8.0
   
f. lablel nginx pods as web and mongo as db

   kubectl label deployment nginx apps=web -n np
   
   kubectl label po nginx-f89759699-8mx4d   apps=web -n np
   kubectl label po mongo-55557d48d7-2k2s5  apps=db -n np
   
   kubectl get pods --show-labels -n np
   
   kubectl -n np exec -ti nginx-f89759699-8mx4d -- bash
   kubectl -n np exec -ti nginx-f89759699-8mx4d -- bash -c "date"
   
   kubectl run tom --image=tomcat:8.0 -n np
   kubectl -n np exec -ti tom -- bash -c "apt-get update; apt-get install curl wget dnsutils"
   kubectl -n np exec -ti tom -- bash -c "nslookup kubernetes.default.svc.cluster.local"
   kubectl -n np exec -ti tom -- bash -c "nslookup kubernetes.default"
   kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
   kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
   kubectl -n np exec -ti tom -- bash -c "curl http://10.104.164.239"

   

g. Try to connect nginx service and do telnet mongo service from tomcat pod  before had deployment of all network ingress block policy

 kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
 telnet mongo 27017
 
 h. Deploy network policy to block all network ingress traffic
 
 
 i. Try to connect nginx service and do telnet mongo service from tomcat pod  after had deployment of all network ingress block policy

 kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
 telnet mongo 27017
 

j.create network ingress policy to access db from web
#podselector based ingress policy



apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-netpolicy
spec:
  podSelector:
    matchLabels:
      app: db
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: web
    ports:
    - port: 27017

k. Now to try to access mongo service from nginx pod
   telnet mongo 27017

l. Now try to access mongo service from tomcat po
   telnet mongo 27017

10. Nginx Ingress 
Create nginx ingress stack
Create tomcat deployment and service
Create tomcat-ingress
Try to access tomcat host name (tom.app.com) from outside browser by nginx-ingress node port







