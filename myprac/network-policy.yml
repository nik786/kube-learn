1. Write a Network policy to deny all ingress network  traffic

cat deny-all.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress 
  namespace: np  
spec: 
  podSelector: {}
  policyTypes: 
    - Ingress  

##sucessfull

2. Write a Network policy to allow all ingress network traffic

cat no2.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress


3. Write a network policy to deny all egress traffic
cat n03.yml 
apiVersion: networking.k8s.io
kind: NetworkPolicy
metadata:
  name: deny-all-egress
spec:
  podSelector: {}
  policyTypes:
    - Egress



4. Write network policy to accept all egress traffic

cat n04.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  egress
  - {}
  policyTypes:
  - Egress 

5.Write Network policy to deny all ingress and egress traffic

cat n05.yml 
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress-egress
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress


6.
a. Create a nginx deployment 
   kubectl create namespace np
   kubectl create deployment nginx --image=nginx -n np
   
   
b. Create a service for the nginx deployment
   kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort -n np
   
c. Create mongo deployment 
   kubectl create deployment mongo --image=mongo -n np

d. Create a service for the mongo deployment
   kubectl expose deployment mongo --port=27017 --target-port=27017 --type=NodePort -n np

e. Create tomcat pod to test the connecivity of nginx and mongo deployment
   kubectl run tomcat --image=tomcat:8.0
   
f. lablel nginx pods as web and mongo as db

   kubectl label deployment nginx apps=web -n np
   
   kubectl label po nginx-f89759699-8mx4d   apps=web -n np
   kubectl label po mongo-55557d48d7-2k2s5  apps=db -n np
   
   kubectl get pods --show-labels -n np
   
   kubectl -n np exec -ti nginx-f89759699-8mx4d -- bash
   kubectl -n np exec -ti nginx-f89759699-8mx4d -- bash -c "date"
   
   kubectl run tom --image=tomcat:8.0 -n np
   kubectl -n np exec -ti tom -- bash -c "apt-get update; apt-get install curl wget dnsutils"
   kubectl -n np exec -ti tom -- bash -c "nslookup kubernetes.default.svc.cluster.local"
   kubectl -n np exec -ti tom -- bash -c "nslookup kubernetes.default"
   kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
   kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
   kubectl -n np exec -ti tom -- bash -c "curl http://10.104.164.239"

   

g. Try to connect nginx service and do telnet mongo service from tomcat pod  before had deployment of all network ingress block policy

 kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
 telnet mongo 27017
 
 h. Deploy network policy to block all network ingress traffic
 
 
 i. Try to connect nginx service and do telnet mongo service from tomcat pod  after had deployment of all network ingress block policy

 kubectl -n np exec -ti tom -- bash -c "curl http://nginx"
 telnet mongo 27017
 

j.create network ingress policy to access db from web
#podselector based ingress policy



apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-netpolicy
spec:
  podSelector:
    matchLabels:
      app: db
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: web
    ports:
    - port: 27017

k. Now to try to access mongo service from nginx pod
   telnet mongo 27017

l. Now try to access mongo service from tomcat po
   telnet mongo 27017

10. Nginx Ingress 
a.Create nginx ingress stack
b.Create tomcat deployment and service
c.Create tomcat-ingress

d. Inject hosts entry in cat /etc/hosts file of vm and physical machine

vm:
10.0.2.15        tomcat.app.com

host:
192.168.56.162   tomcat.app.com


e.Try to access tomcat host name (tom.app.com) from outside browser by nginx-ingress node port
f. Verify to nginx ingress process by curl command from vm
g. login to nginx-ingress pod to check ingress configuration
   curl tomcat.app.com:31732

kubectl -n nginx-ingress get svc
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
nginx-ingress   NodePort    10.106.8.60      <none>        80:31732/TCP,443:32372/TCP   39h
tomcat          ClusterIP   10.100.249.125   <none>        8080/TCP                     39h

kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission

Access it in browser

http://tomcat.app.com:31732/

kubectl -n nginx-ingress exec -it nginx-ingress-84969d56b4-dd7zl -- sh


cd /etc/nginx/conf.d/



cat nginx-ingress-tomcat-ingress.conf 
# configuration for nginx-ingress/tomcat-ingress

upstream nginx-ingress-tomcat-ingress-tomcat.app.com-tomcat-8080 {
        random two least_conn;
        
        server 192.168.56.144:8080 max_fails=1 fail_timeout=10s;
        
}


server {
        
        
        listen 80;
        
        
        
        
        

        server_tokens on;

        server_name tomcat.app.com;

        
        
        

        
        location / {
                
                
                
                proxy_http_version 1.1;
                

                proxy_connect_timeout 60s;
                proxy_read_timeout 60s;
                client_max_body_size 1m;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_buffering on;
                
                proxy_pass http://nginx-ingress-tomcat-ingress-tomcat.app.com-tomcat-8080;
                
                
                
        }
        
        
}

https://github.com/infra-ops/dev-proxy
https://github.com/kube-ops-org/ingress-nginx.git
https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/
https://kubernetes.github.io/ingress-nginx/deploy/
https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ingress-guide-nginx-example.html
https://www.alibabacloud.com/blog/routing-applications-in-kubernetes-with-nginx-ingress_594719
https://avinetworks.com/docs/18.1/kubernetes-ingress-vs-configuration/
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-on-digitalocean-kubernetes-using-helm
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes
https://medium.com/@Oskarr3/setting-up-ingress-on-minikube-6ae825e98f82
https://github.com/nik786/kube-learn/blob/master/exam/networking/np.yml
https://kubernetes.github.io/ingress-nginx/user-guide/tls/
https://www.padok.fr/en/blog/kubernetes-secrets
https://kubernetes.github.io/ingress-nginx/troubleshooting/
https://docs.cloud.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengsettingupingresscontroller.htm
https://kubernetes.github.io/ingress-nginx/examples/tls-termination/
https://tech.paulcz.net/blog/creating-self-signed-certs-on-kubernetes/




alb-ingress:
https://medium.com/@sajid2045/aws-eks-ingress-option-alb-nginx-fc64a4a5ea9f
https://www.bogotobogo.com/DevOps/Docker/Docker-Kubernetes-ALB-Ingress-Controller-with-EKS.php
https://aws.amazon.com/blogs/opensource/network-load-balancer-nginx-ingress-controller-eks/
https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/
https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html
https://docs.bitnami.com/tutorials/secure-kubernetes-services-with-ingress-tls-letsencrypt

curl -kL http://10.100.141.238:5678/apple
curl -kL http://10.106.86.117:5678/banana


kubectl -n nginx-ingress create cm nginx-tmpl --from-file=nginx.tmpl

kubectl -n nginx-ingress  create secret tls tom-tls --key=tomcat.app.com.key --cert=tomcat.app.com.crt
kubectl describe secret tom-tls -n nginx-ingress
kubectl -n nginx-ingress get secret tom-tls -o yaml > tt.yml




mkdir /etc/ssl/abc.example.com
openssl genrsa -out /etc/ssl/abc.example.com/abc.example.com.key 1024
openssl req -new -key /etc/ssl/abc.example.com/abc.example.com.key -out /etc/ssl/abc.example.com/abc.example.com.csr
openssl x509 -req -days 365 -in /etc/ssl/abc.example.com/abc.example.com.csr -signkey /etc/ssl/abc.example.com/abc.example.com.key -out /etc/ssl/abc.example.com/abc.example.com.crt
cat /etc/ssl/abc.example.com/abc.example.com.crt /etc/ssl/abc.example.com/abc.example.com.key |  tee /etc/ssl/abc.example.com/abc.example.com.pem



mkdir tomcat.app.com
openssl genrsa -out tomcat.app.com/tomcat.app.com.key 1024
openssl req -new -key tomcat.app.com/tomcat.app.com.key -out tomcat.app.com/tomcat.app.com.csr
openssl x509 -req -days 365 -in tomcat.app.com/tomcat.app.com.csr -signkey tomcat.app.com/tomcat.app.com.key -out tomcat.app.com/tomcat.app.com.crt
gg
