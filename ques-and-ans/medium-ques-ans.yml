
[Core Concepts (13%)]

Practice questions based on these concepts
Understand Kubernetes API Primitives
Create and Configure Basic Pods

1.How to List all the namespaces in the cluster??

kubectl get namespaces
kubectl get ns

2.How to List all the pods in all namespaces ??

kubectl get po --all-namespaces

3.How to List all the services in the particular namespace

kubectl get svc -n <namespace name>

4.List all the pods showing name and namespace with a json path expression

kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'metadata.namespace']}"

5.How to Create an nginx pod in a default namespace and verify the pod running?

kubectl run nginx --image=nginx --restart=Never

kubectl get po

6.Create the same nginx pod with a yaml file

kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml > nginx-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
// create a pod 

kubectl create -f nginx-pod.yaml

8.how to Output the yaml file of the pod you just created?
kubectl get po nginx -o yaml

9.How to Output the yaml file of the pod you just created without the cluster-specific information?

kubectl get po nginx -o yaml --export


10.How to Get the complete details of the pod you just created?
kubectl describe pod nginx

11.How to Delete the pod you just created?
kubectl delete po nginx
kubectl delete -f nginx-pod.yaml


12.How to Delete the pod you just created without any delay (force delete)??
kubectl delete po nginx --grace-period=0 --force

13.How to  Create the nginx pod with version 1.17.4 and expose it on port 80?
kubectl run nginx --image=nginx:1.17.4 --restart=Never --port=80


14.How to Change the Image version to 1.15-alpine for the pod you just created and verify the image version is updated??

kubectl set image pod/nginx nginx=nginx:1.15-alpine
kubectl describe po nginx
// another way it will open vi editor and change the version
kubeclt edit po nginx
kubectl describe po nginx


15. How to Change the Image version back to 1.17.1 for the pod you just updated and observe the changes??
kubectl set image pod/nginx nginx=nginx:1.17.1
kubectl describe po nginx
kubectl get po nginx -w # watch it

16.How to Check the Image version without the describe command??
kubectl get po nginx -o jsonpath='{.spec.containers[].image}{"\n"}'

17.Create the nginx pod and execute the simple shell on the pod
kubectl run nginx --image=nginx --restart=Never
kubectl exec -it nginx /bin/sh


18.How to Get the IP Address of the pod you just created??
kubectl get po nginx -o wide

19.How to Create a busybox pod and run command ls while creating it and check the logs??
kubectl run busybox --image=busybox --restart=Never -- ls
kubectl logs busybox

20.How If pod crashed check the previous logs of the pod?
kubectl logs busybox -p

21.How to Create a busybox pod with command sleep 3600??
kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c "sleep 3600"

22.How to Check the connection of the nginx pod from the busybox pod??
kubectl exec -it busybox -- wget -o- <IP Address>

23.How to Create a busybox pod and echo message ‘How are you’ and delete it manually??
kubectl run busybox --image=nginx --restart=Never -it -- echo "How are you"

24.How to Create a busybox pod and echo message ‘How are you’ and have it deleted immediately??
kubectl run busybox --image=nginx --restart=Never -it --rm -- echo "How are you"

25.How to Create an nginx pod and list the pod with different levels of verbosity
// create a pod
kubectl run nginx --image=nginx --restart=Never --port=80
// List the pod with different verbosity
kubectl get po nginx --v=7
kubectl get po nginx --v=8
kubectl get po nginx --v=9

26.List the nginx pod with custom columns POD_NAME and POD_STATUS
kubectl get po -o=custom-columns="POD_NAME:.metadata.name, POD_STATUS:.status.containerStatuses[].state"

27.How to List all the pods sorted by name??
kubectl get pods --sort-by=.metadata.name

28.How to List all the pods sorted by created timestamp??
kubectl get pods--sort-by=.metadata.creationTimestamp


[ Multi-Container Pods (10%) ]

1.Create a Pod with three busy box containers with commands “ls; sleep 3600;”, “echo Hello World; 
sleep 3600;” and “echo this is the third container; sleep 3600” respectively and check the status

// first create single container pod with dry run flag
kubectl run busybox --image=busybox --restart=Never --dry-run -o yaml -- bin/sh -c "sleep 3600; ls" > multi-container.yaml
// edit the pod to following yaml and create it
kubectl create -f multi-container.yaml
kubectl get po busybox

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: busybox
  name: busybox
spec:
  containers:
  - args:
    - bin/sh
    - -c
    - ls; sleep 3600
    image: busybox
    name: busybox1
    resources: {}
  - args:
    - bin/sh
    - -c
    - echo Hello world; sleep 3600
    image: busybox
    name: busybox2
    resources: {}
  - args:
    - bin/sh
    - -c
    - echo this is third container; sleep 3600
    image: busybox
    name: busybox3
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}



2. How to Check the logs of each container that you just created

kubectl logs busybox -c busybox1
kubectl logs busybox -c busybox2
kubectl logs busybox -c busybox3

3. How to Check the previous logs of the second container busybox2 if any
kubectl logs busybox -c busybox2 --previous

4.Run command ls in the third container busybox3 of the above pod
kubectl exec busybox -c busybox3 -- ls


5.How to Show metrics of the above pod containers and 
puts them into the file.log and verify

kubectl top pod busybox --containers
// putting them into file
kubectl top pod busybox --containers > file.log
cat file.log

6. Create a Pod with main container busybox and which executes this “while true;
do echo ‘Hi I am from Main container’ >> /var/log/index.html; sleep 5; done” 
and with sidecar container with nginx image which exposes on port 80. 
Use emptyDir Volume and mount this volume
on path /var/log for busybox and on path /usr/share/nginx/html for nginx container.
Verify both containers are running.

// create an initial yaml file with this
kubectl run multi-cont-pod --image=busbox --restart=Never --dry-run -o yaml > multi-container.yaml
// edit the yml as below and create it
kubectl create -f multi-container.yaml
kubectl get po multi-cont-pod



apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: multi-cont-pod
  name: multi-cont-pod
spec:
  volumes:
  - name: var-logs
    emptyDir: {}
  containers:
  - image: busybox
    command: ["/bin/sh"]
    args: ["-c", "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5;done"]
    name: main-container
    resources: {}
    volumeMounts:
    - name: var-logs
      mountPath: /var/log
  - image: nginx
    name: sidecar-container
    resources: {}
    ports:
      - containerPort: 80
    volumeMounts:
    - name: var-logs
      mountPath: /usr/share/nginx/html
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}


8. Exec into both containers and verify that main.txt exist and query 
the main.txt from sidecar container with curl localhost

// exec into main container
kubectl exec -it  multi-cont-pod -c main-container -- sh
cat /var/log/main.txt
// exec into sidecar container
kubectl exec -it  multi-cont-pod -c sidecar-container -- sh
cat /usr/share/nginx/html/index.html
// install curl and get default page
kubectl exec -it  multi-cont-pod -c sidecar-container -- sh
# apt-get update && apt-get install -y curl
# curl localhost

Services and Networking (13%)
Practice questions based on these concepts
Understand Services
Demonstrate a basic understanding of NetworkPolicies

1.How to Create an nginx pod with a yaml file with label my-nginx and expose the port 80?
kubectl run nginx --image=nginx --restart=Never --port=80 --dry-run -o yaml > nginx.yaml
// edit the label app: my-nginx and create the pod
kubectl create -f nginx.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    app: my-nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}


2. Create the service for this nginx pod with the pod selector app: my-nginx

// create the below service
kubectl create -f nginx-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: my-nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376
      
      
 3.How to Find out the label of the pod and verify the service has the same label?
 // get the pod with labels
kubectl get po nginx --show-labels
// get the service and chekc the selector column
kubectl get svc my-service -o wide

4.How to Delete the service and create the service with kubectl expose command and verify the label??
// delete the service
kubectl delete svc my-service
// create the service again
kubectl expose po nginx --port=80 --target-port=9376
// verify the label
kubectl get svc -l app=my-nginx


5. How to Delete the service and create the service again with type NodePort??
// delete the service
kubectl delete svc nginx
// create service with expose command
kubectl expose po nginx --port=80 --type=NodePort

6.How to Create the temporary busybox pod and hit the service. Verify the service
that it should return the nginx page index.html.

kubectl get svc nginx -o wide

// create temporary busybox to check the nodeport
kubectl run busybox --image=busybox --restart=Never -it --rm -- wget -o- <Cluster IP>:80

7.How to Create a NetworkPolicy which denies all ingress traffic?
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  
  
[ State Persistence (8%) ]
Practice questions based on these concepts

1. List Persistent Volumes in the cluster

kubectl get pv

2. Create a hostPath PersistentVolume named task-pv-volume with storage 10Gi,
   access modes ReadWriteOnce, storageClassName manual, and volume at /mnt/data and verify
   
kubectl create -f task-pv-volume.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: task-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
   
3.Create a PersistentVolumeClaim of at least 3Gi storage and 
  access mode ReadWriteOnce and verify status is Bound

kubectl create -f task-pv-claim.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
      
      
4. How to Delete persistent volume and PersistentVolumeClaim we just created ??

kubectl delete pvc task-pv-claim
kubectl delete pv task-pv-volume

5.How to Create a Pod with an image Redis and configure a volume 
that lasts for the lifetime of the Pod

kubectl create -f redis-storage.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis
  volumes:
  - name: redis-storage
    emptyDir: {}
    
6. Exec into the above pod and create a file named file.txt with the text ‘This is called the file’ in the path 
/data/redis and open another tab and exec again with the same pod and verifies file exist in the same path.    



// first terminal
kubectl exec -it redis-storage /bin/sh
cd /data/redis
echo 'This is called the file' > file.txt
//open another tab
kubectl exec -it redis-storage /bin/sh
cat /data/redis/file.txt

7.Delete the above pod and create again from the same yaml file 
and verifies there is no file.txt in the path /data/redis

kubectl delete pod redis
kubectl create -f redis-storage.yaml
kubectl exec -it redis-storage /bin/sh
cat /data/redis/file.txt // file doesn't exist

8.Create PersistentVolume named task-pv-volume with storage 10Gi, 
access modes ReadWriteOnce, storageClassName manual, and volume at /mnt/data and
Create a PersistentVolumeClaim of at least 3Gi storage and access 
mode ReadWriteOnce and verify status is Bound

kubectl create -f task-pv-volume.yaml
kubectl create -f task-pv-claim.yaml
kubectl get pv
kubectl get pvc

9.Create an nginx pod with containerPort 80 and
with a PersistentVolumeClaim task-pv-claim and has a mouth path "/usr/share/nginx/html"

apiVersion: v1
kind: Pod
metadata:
  name: task-pv-pod
spec:
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: task-pv-claim
  containers:
    - name: task-pv-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
          
          
          
[ Pod Design (20%) ]

Practice questions based on these concepts
Understand how to use Labels, Selectors and Annotations
Understand Deployments and how to perform rolling updates
Understand Deployments and how to perform rollbacks
Understand Jobs and CronJobs


1. How to Get the pods with label information
kubectl get pods --show-labels

2. How to Create 5 nginx pods in which two of them is labeled env=prod and three of them is labeled env=dev ??
kubectl run nginx-dev1 --image=nginx --restart=Never --labels=env=dev
kubectl run nginx-dev2 --image=nginx --restart=Never --labels=env=dev
kubectl run nginx-dev3 --image=nginx --restart=Never --labels=env=dev
kubectl run nginx-prod1 --image=nginx --restart=Never --labels=env=prod
kubectl run nginx-prod2 --image=nginx --restart=Never --labels=env=prod

3.How to Verify all the pods are created with correct labels ???
  kubeclt get pods --show-labels

4.How to Get the pods with label env=dev??
  kubectl get pods -l env=dev
  
5.How to Get the pods with label env=dev and also output the labels?
kubectl get pods -l env=dev --show-labels

6.How to Get the pods with label env=prod??
kubectl get pods -l env=prod

7.How to Get the pods with label env=prod and also output the labels?
kubectl get pods -l env=prod --show-labels

8.Get the pods with label env??
kubectl get pods -L env

9.How to Get the pods with labels env=dev and env=prod??
kubectl get pods -l 'env in (dev,prod)'

10.Get the pods with labels env=dev and env=prod and output the labels as well??
kubectl get pods -l 'env in (dev,prod)' --show-labels

11.How to Change the label for one of the pod to env=uat and list all the pods to verify??
kubectl label pod/nginx-dev3 env=uat --overwrite
kubectl get pods --show-labels

12.Remove the labels for the pods that we created now and verify all the labels are remove??
kubectl label pod nginx-dev{1..3} env-
kubectl label pod nginx-prod{1..2} env-
kubectl get po --show-labels

13.How to add the label app=nginx for all the pods and verify??
kubectl label pod nginx-dev{1..3} app=nginx
kubectl label pod nginx-prod{1..2} app=nginx
kubectl get po --show-labels

14.How to Get all the nodes with labels (if using minikube you would get only master node)??
kubectl get nodes --show-labels

15.How to Label the node (minikube if you are using) nodeName=nginxnode?
   kubectl label node minikube nodeName=nginxnode

16.How to Create a Pod that will be deployed on this node with the label nodeName=nginxnode??
   kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml > pod.yaml
   // add the nodeSelector like below and create the pod
   kubectl create -f pod.yaml
   
 apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  nodeSelector:
    nodeName: nginxnode
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

17. How to Verify the pod that it is scheduled with the node selector??
kubectl describe po nginx | grep Node-Selectors

18.Verify the pod nginx that we just created has this label
kubectl describe po nginx | grep Labels

19.Annotate the pods with name=webapp?
kubectl annotate pod nginx-dev{1..3} name=webapp
kubectl annotate pod nginx-prod{1..2} name=webapp

14.Verify the pods that have been annotated correctly ?
kubectl describe po nginx-dev{1..3} | grep -i annotations
kubectl describe po nginx-prod{1..2} | grep -i annotations

15.Remove the annotations on the pods and verify ?

kubectl annotate pod nginx-dev{1..3} name-
kubectl annotate pod nginx-prod{1..2} name-
kubectl describe po nginx-dev{1..3} | grep -i annotations
kubectl describe po nginx-prod{1..2} | grep -i annotations

16.Remove all the pods that we created so far??

kubectl delete po --all

17.Create a deployment called webapp with image nginx with 5 replicas??
kubectl create deploy webapp --image=nginx --dry-run -o yaml > webapp.yaml
// change the replicas to 5 in the yaml and create it
kubectl create -f webapp.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: webapp
  name: webapp
spec:
  replicas: 5
  selector:
    matchLabels:
      app: webapp
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: webapp
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
status: {}


18. Get the deployment you just created with labels

kubectl get deploy webapp --show-labels

19.Output the yaml file of the deployment you just created

kubectl get deploy webapp -o yaml

20. Get the pods of this deployment

// get the label of the deployment
kubectl get deploy --show-labels
// get the pods with that label
kubectl get pods -l app=webapp


















   
   












