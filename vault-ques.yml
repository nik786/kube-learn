Reference
External Secrets Operator Integration with HashiCorp Vault
https://eminalemdar.medium.com/external-secrets-operator-integration-with-hashicorp-vault-aff3f956237b









External Secrets Operator is an Open Source Kubernetes Operator that integrates external 
Secret Management Systems like AWS Secrets Manager, HashiCorp Vault, 
Google Secrets Manager, etc. and it is designed to synchronize secrets from external APIs to Kubernetes.

In this demonstration, I will use a Vault installation on a Kubernetes cluster with the 
official Helm chart and show the authentication with Kubernetes auth method.

It’s time to create the secure authentication and authorization between HashiCorp Vault and ESO.


 I will first create a read policy for all the paths in the Vault.

 vault policy write eso -<<EOF
path "*"
{  capabilities = ["read"]
}
EOF

I will now enable the Kubernetes Authentication method for Vault.

vault auth enable kubernetes

It’s time to configure the Kubernetes authentication method in Vault.

vault write auth/kubernetes/config \
    token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
    kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt 


Next I will create a Vault role to access the secrets. Just like the previous environment variable I fetched the 
secret name for the external secrets service account and again you should change the secret name according to your environment.

vault write auth/kubernetes/role/vault-role \
   bound_service_account_names=vault-serviceaccount \
   bound_service_account_namespaces=default \
   policies=read-policy \
   ttl=1h


Enable engine secret
vault secrets enable -path=secret kv

cat <<EOF > /home/vault/secret.hcl
path "secret/login/*" {
  capabilities = ["create", "read", "update", "delete", "list"]
}

vault policy write read-policy /home/vault/secret.hcl

vault kv put secret/login pattoken=ytbuytbytbf765rb65u56rv


Rotate the password
--------------------

#!/bin/bash

# Generate a new password
NEW_PASSWORD=$(openssl rand -base64 16)

# Update the password in Vault
vault kv put secret/ag-app/ag-dev/rds username="rds-user" password="$NEW_PASSWORD"


Versioning
-----------

vault kv enable-versioning secret

vault kv put secret/ag-app/ag-dev/rds username="user1" password="user123"

vault kv put secret/ag-app/ag-dev/rds username="user1" password="user321"
























