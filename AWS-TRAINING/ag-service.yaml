AWSTemplateFormatVersion: '2010-09-09'
Description: Deployment of ECS cluster and service to AWS (Fargate + Fargate Spot, target tracking autoscaling).

Parameters:

  Account:
    Description: AWS account ID
    Type: String

  Region:
    Description: AWS region
    Type: String

  Role:
    Description: ARN of the IAM role for ECS tasks
    Type: String

  Environment:
    Description: The name of the environment that is being deployed to.
    Type: String
    AllowedValues:
      - dev
      - prod

  Version:
    Description: Version of the service
    Type: String

  Image:
    Description: ECR repository for the container image in the format <account>.dkr.ecr.<region>.amazonaws.com/<repository>:<tag>
    Type: String

  ServiceName:
    Description: Name of the ECS service (base name; '-service' will be suffixed)
    Type: String

  ContainerPort:
    Description: Port that the container will be listening on
    Type: Number

  MaxCapacity:
    Description: Max number of tasks for autoscaling
    Type: Number

  MinCapacity:
    Description: Min number of tasks for autoscaling
    Type: Number

  DesiredCount:
    Description: Initial desired number of tasks
    Type: Number

  Cpu:
    Description: CPU reservation for the task (e.g., 256, 512, 1024, ...)
    Type: Number

  Memory:
    Description: Memory (MiB) for the task (e.g., 512, 1024, 2048, ...)
    Type: Number

  ClusterName:
    Description: ECS Cluster name
    Type: String

  HealthCheckPath:
    Description: Health check endpoint path
    Type: String

  HealthyThresholdCount:
    Description: Number of successful health checks before the container is considered healthy
    Type: Number

  UnhealthyThresholdCount:
    Description: Number of failed health checks before the container is considered unhealthy
    Type: Number

  HealthCheckTimeoutSeconds:
    Description: Timeout in seconds for health checks
    Type: Number

  HealthCheckIntervalSeconds:
    Description: Interval in seconds between health checks
    Type: Number

  AutoScalingTargetValue:
    Description: Target CPU utilization for ECS target tracking (e.g., 50 for 50%)
    Type: Number

  VPC:
    Description: VPC ID
    Type: String

  SubnetA:
    Description: Subnet ID for availability zone A
    Type: AWS::EC2::Subnet::Id

  SubnetB:
    Description: Subnet ID for availability zone B
    Type: AWS::EC2::Subnet::Id

  TargetGroup:
    Description: Target Group ARN
    Type: String

  ServiceSecurityGroup:
    Description: Security Group ID
    Type: String

Resources:

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # Associate Fargate + Fargate Spot capacity providers
  ClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      # Default strategy: keep a base task on Fargate (HA), prefer Spot for burst (cost)
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 1
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 2

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref ClusterName, '-', !Ref ServiceName]]
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref ServiceName, '-task-definition']]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !Ref Role
      TaskRoleArn: !Ref Role
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref Environment
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub "curl -f http://localhost:${ContainerPort}${HealthCheckPath} || exit 1"
            Interval: !Ref HealthCheckIntervalSeconds
            Timeout: !Ref HealthCheckTimeoutSeconds
            Retries: !Ref UnhealthyThresholdCount
            StartPeriod: 10

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ClusterCapacityProviderAssociation
    Properties:
      ServiceName: !Join ['', [!Ref ServiceName, '-service']]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 30
      # Use capacity providers instead of LaunchType for Spot + On-Demand mix
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 1
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Ref ServiceName
         .ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      EnableECSManagedTags: true
      PropagateTags: SERVICE

  # Application Auto Scaling: target tracking on ECS service desired count
  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - Service
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub "service/${ECSCluster}/${ServiceName}-service"
      RoleARN: !Ref "AWS::NoValue"  # Use service-linked role (auto-created)
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicyTargetTrackingCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-cpu-target-tracking"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref AutoScalingTargetValue  # e.g., 50 -> aim for 50% CPU
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 120

Outputs:
  ClusterNameOut:
    Description: The name of the ECS Cluster
    Value: !Ref ECSCluster

  ServiceNameOut:
    Description: The name of the ECS Service
    Value: !Ref Service

  LogGroupName:
    Description: CloudWatch Logs group for the service
    Value: !Ref LogGroup
