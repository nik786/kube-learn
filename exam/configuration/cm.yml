1. [create two manually entered data items with a key called mounttains]
   kubectl create configmap mountains --from-literal=cred1=sec1 --from-literal=cred2=sec2

2. [command to see actual data of created configmap in yaml form]
   kubectl get configmap mountains -o yaml

3. [create a yaml descriptor for configmap which will contain some data] 
   cat sample-configmap.yaml
   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: my-configmap
     namespace: lab
   data:
      cred3: secret3
      cred4: secret4
      
      
 6.
 
 apiVersion: v1
 kind: ConfigMap
 metadata:
   name: example-redis-config
 data:
   redis-config: ""
 
 
 

4.[ How to pass ConfigMap data to a pod as an environment variable looks like this ]

  cat sample-config-env.yml
  
  apiVersion: v1
  kind: Pod
  metadata:
    name: my-pod
  spec:
    containers:
    - name: my-cont
      image: busybox
      command: ['sh', '-c', "echo $(MY_VAR) && sleep 3600"] 
      env: 
      - name: MY_VAR
        valueFrom:
          configmapKeyRef: 
            name: my-configmap
            key: cred3


5.[ How to parse configmap to pod inform of volume] 
  cat sample-config-volume.yml

   apiVersion: v1
   kind: ConfigMap
   metadata:
      name: myconfigmap-volume
  spec: 
    containers:
    - name: my-cont
      image: busybox
      command: ['sh', '-c', "$(cat /etc/config/cred3) && sleep 3600"]
      volumeMounts: 
        - name: config-volume
          mountPath: /etc/config
   volumes:
     - name: config-volume
       configMap: 
         name: my-configmap


kubeadm init --pod-network-cidr=192.168.10.0/24   
     



[security context]

1. create a pod with security context with userid 1000 

cat sec-1.yml

apiVersion: v1
kind: Pod
metadata:
  name: sec-pod-demo-2
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: sec-cont-demo-2
    image: busybox
    securityContext:
      runAsUser: 2000
      allowPrivilegeEscalation: false


2. [ create a pod to read the message.txt file and print the message to the log]
[secret]

1. [ create secret ]
   echo -n 'admin' > admin.txt
   echo -n 'password' > pass.txt

2. [ command to create secret ] 
   kubectl create secret generic db-user-pass --from-file=admin.txt --from-file=pass.txt 


3. [ Create secret and use it in pod as env variable ]



cat secret.yml 
apiVersion: v1
kind: Secret
metadata:
  name: dev-secret
stringData:
  dev-key: japan@123




cat sample-secret.yml 
apiVersion: v1
kind: Pod
metadata:
  name: dev-pod-secret
spec:
  containers:
  - name: dev-cont-secret
    image: busybox
    command: ['sh', '-c', "echo hello, kubernetes && sleep 3600"]
    env:
    - name: MY_PASS
      valueFrom:
        secretKeyRef:
          name: dev-secret
          key: dev-key




[serviceaccount]


kubectl create serviceaccount dev-svc


cat sample-svc.yml

apiVersion: v1
kind: Pod
metadata:
   namespace: dev-svc
   containers:
   - name: dev-svc-cont
     image: busybox
     command: ['sh', '-c' , "echo hello && sleep 3600"]


[Resource Requirements]




1. [ Create a pod  with 64m request and 128m limit and 250c cpu request  and 500 m limit]


Create ConfigMaps from directories

mkdir -p configure-pod-container/configmap/

# Download the sample files into `configure-pod-container/configmap/` directory
wget https://kubernetes.io/examples/configmap/game.properties -O configure-pod-container/configmap/game.properties
wget https://kubernetes.io/examples/configmap/ui.properties -O configure-pod-container/configmap/ui.properties

# Create the configmap
kubectl create configmap game-config --from-file=configure-pod-container/configmap/



kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties

kubectl describe configmaps game-config-2

# Download the sample files into `configure-pod-container/configmap/` directory
wget https://kubernetes.io/examples/configmap/game-env-file.properties -O configure-pod-container/configmap/game-env-file.properties

# The env-file `game-env-file.properties` looks like below
cat configure-pod-container/configmap/game-env-file.properties
enemies=aliens
lives=3
allowed="true"

# This comment and the empty line above it are ignored

kubectl create configmap game-config-env-file \
       --from-env-file=configure-pod-container/configmap/game-env-file.properties
       
 kubectl get configmap game-config-env-file -o yaml


kubectl create configmap game-config-3 --from-file=<my-key-name>=<path-to-file>




Add ConfigMap data to a specific path in the Volume

apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh","-c","cat /etc/config/keys" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
        items:
        - key: SPECIAL_LEVEL
          path: keys
  restartPolicy: Never
  
Populate a Volume with data stored in a ConfigMap
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "ls /etc/config/" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: special-config
  restartPolicy: Never
  
  
  
  
  
  
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: 2016-02-18T19:14:38Z
  name: example-config
  namespace: default
data:
  # example of a simple property defined using --from-literal
  example.property.1: hello
  example.property.2: world
  # example of a complex property defined using --from-file
  example.property.file: |-
    property.1=value-1
    property.2=value-2
    property.3=value-3
  
  
  
  
apiVersion: v1
kind: ConfigMap
metadata:
  name: logtrail-config
data:
  logtrail.json: |
    {
        "version" : 1,
        "index_patterns" : [
        {      
            "es": {
                "default_index": "logstash-*"
            },
            "tail_interval_in_seconds": 10,
            "es_index_time_offset_in_seconds": 0,
            "display_timezone": "local",
            "display_timestamp_format": "MMM DD HH:mm:ss",
            "max_buckets": 500,
            "default_time_range_in_days" : 0,
            "max_hosts": 100,
            "max_events_to_keep_in_viewer": 5000,
            "fields" : {
                "mapping" : {
                    "timestamp" : "@timestamp",
                    "hostname" : "kubernetes.host",
                    "program": "kubernetes.pod_name",
                    "message": "log"
                },
                "message_format": "{{{log}}}"
            },
            "color_mapping" : {
            }
        }]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
data:
  kibana.yml: |
    ---
    server.name: kibana
    server.host: "0"
    elasticsearch.hosts: http://elasticsearch:9200
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: kibana
  labels:
    component: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
     component: kibana
  template:
    metadata:
      labels:
        component: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana-oss:7.2.0 # or your image
        #image: kub/kibana-logtrail-nik
        #image: sh4d1/kibana-logtrail:7.2.0
        #command: ["/bin/sh"]
        #args: ["-c","/bin/sleep 86400"]
        env:
        - name: CLUSTER_NAME
          value: esdb # the name of your ES cluster
        resources:
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: 5601
          name: http
        readinessProbe:
          httpGet:
            path: /api/status
            port: http
          initialDelaySeconds: 20
          timeoutSeconds: 5
        volumeMounts:
          - name: config
            mountPath: /usr/share/kibana/config
            readOnly: true
          - name: logtrail-config
            mountPath: /config
          - name: kibana-plugins
            mountPath: /usr/share/kibana/plugins
      volumes:
        - name: config
          configMap:
            name: kibana-config
        - name: logtrail-config
          configMap:
            name: logtrail-config
        - name: kibana-plugins
          persistentVolumeClaim:                                                                                   
            claimName: kibana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  labels:
    component: kibana
spec:
  selector:
    component: kibana
  ports:
  - name: http
    port: 80
    targetPort: http
  type: NodePort
            
            
            
  
  
  
  
  
  
  
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  labels:
    k8s-app: fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
    @INCLUDE input-kubernetes.conf
    @INCLUDE input-nginx.conf
    @INCLUDE filter-kubernetes.conf
    @INCLUDE output-elasticsearch.conf
  input-kubernetes.conf: |
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Parser            docker
        DB                /var/log/flb_kube.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        Refresh_Interval  10
  input-nginx.conf: |
    [INPUT]
        Name              tail
        Path              /var/log/nginx/*.log
        Parser            nginx
        DB                /var/log/flb_kube_nginx.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        Refresh_Interval  10
  filter-kubernetes.conf: |
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc.cluster.local:443
        Merge_Log           On
        K8S-Logging.Parser  On
  output-elasticsearch.conf: |
    [OUTPUT]
        Name            es
        Match           *
        Host            ${FLUENT_ELASTICSEARCH_HOST}
        Port            ${FLUENT_ELASTICSEARCH_PORT}
        Logstash_Format On
        Retry_Limit     False
  parsers.conf: |
    [PARSER]
        Name   nginx
        Format regex
        Regex ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z
    [PARSER]
        Name   json
        Format json
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On
        # Command      |  Decoder | Field | Optional Action
        # =============|==================|=================
        Decode_Field_As   escaped    log
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluent-bit
  labels:
    k8s-app: fluent-bit-logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: fluent-bit-logging
        version: v1
        kubernetes.io/cluster-service: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:0.14.3
        imagePullPolicy: Always
        ports:
          - containerPort: 2020
        env:
        - name: FLUENT_ELASTICSEARCH_HOST
          value: "elasticsearch"
        - name: FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
      terminationGracePeriodSeconds: 10
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      serviceAccountName: fluent-bit
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule  




 


live test of kibana

apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
data:
  kibana.yml: |
    ---
    server.name: kibana
    server.host: "0"
    elasticsearch.hosts: http://elasticsearch:9200

---

apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: kibana
spec:
  containers:
  - name: kibana
    image: docker.elastic.co/kibana/kibana-oss:7.2.0 # or your image
    ports:
    - containerPort: 5601
      name: http
    volumeMounts:
    - name: config
      mountPath: /usr/share/kibana/config
      readOnly: true
  volumes:
    - name: config
      configMap:
        name: kibana-config

      
     

 
   


