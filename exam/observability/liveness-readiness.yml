Understand LivenessProbes and ReadinessProbes



Define a liveness command
Define a liveness HTTP request
Define a TCP liveness probe
Use a named port
Define readiness probes
Configure Probes







Container probes

A Probe is a diagnostic performed periodically by the kubelet on a Container.

To perform a diagnostic, the kubelet calls a Handler implemented by the Container


ExecAction: Executes a specified command inside the Container. 
The diagnostic is considered successful if the command exits with a status code of 0.

TCPSocketAction: Performs a TCP check against the Container’s IP address on a specified port. 
The diagnostic is considered successful if the port is open

HTTPGetAction: Performs an HTTP Get request against the Container’s 
IP address on a specified port and path. The diagnostic is considered successful 
if the response has a status code greater than or equal to 200 and less than 400.


Each probe has one of three results:

Success: The Container passed the diagnostic.
Failure: The Container failed the diagnostic.
Unknown: The diagnostic failed, so no action should be taken.



livenessProbe: Indicates whether the Container is running. If the liveness probe fails, 
the kubelet kills the Container, and the Container is subjected to its restart policy. 
If a Container does not provide a liveness probe, the default state is Success.

readinessProbe: Indicates whether the Container is ready to service requests. 
If the readiness probe fails, the endpoints controller removes the Pod’s IP address 
from the endpoints of all Services that match the Pod. The default state of readiness 
before the initial delay is Failure. If a Container does not provide a readiness probe, is Success.


When should you use liveness or readiness probes?

If the process in your Container is able to crash on its own whenever it encounters an issue or becomes unhealthy,
you do not necessarily need a liveness probe; the kubelet will automatically perform 
the correct action in accordance with the Pod’s restartPolicy


If you’d like your Container to be killed and restarted if a probe fails, 
then specify a liveness probe, and specify a restartPolicy of Always or OnFailure.


If you’d like to start sending traffic to a Pod only when a probe succeeds, specify a readiness probe.

the readiness probe might be the same as the liveness probe, but the existence of the readiness probe in 
the spec means that the Pod will start without receiving any traffic and only start receiving traffic after 
the probe starts succeeding. If your Container needs to work on loading large data, configuration files, 
or migrations during startup, specify a readiness probe.


if you want your Container to be able to take itself down for maintenance, you can specify a 
readiness probe that checks an endpoint specific to readiness that is different from the liveness probe






Restart policy

A PodSpec has a restartPolicy field with possible values 
Always, 
OnFailure,
Never.
The default value is Always. 
restartPolicy applies to all Containers in the Pod. 
restartPolicy only refers to restarts of the Containers 
by the kubelet on the same node


Pod lifetime

In general, Pods do not disappear until someone destroys them

Three types of controllers are available


Use a Job for Pods that are expected to terminate, for example, batch computations. Jobs
are appropriate only for Pods with restartPolicy equal to OnFailure or Never.

Use a ReplicationController, ReplicaSet, or Deployment for Pods that are not 
expected to terminate,
for example, web servers. ReplicationControllers are appropriate only 
for Pods with a restartPolicy of Always.



If restartPolicy is:
Always: Restart Container; Pod phase stays Running

OnFailure: Pod phase becomes Succeeded




apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-http
spec:
  containers:
  - args:
    - /server
    image: k8s.gcr.io/liveness
    livenessProbe:
      httpGet:
        # when "host" is not defined, "PodIP" will be used
        # host: my-host
        # when "scheme" is not defined, "HTTP" scheme will be used. Only "HTTP" and "HTTPS" are allowed
        # scheme: HTTPS
        path: /healthz
        port: 8080
        httpHeaders:
        - name: X-Custom-Header
          value: Awesome
      initialDelaySeconds: 15
      timeoutSeconds: 1
    name: liveness




Pod conditions

A Pod has a PodStatus, which has an array of PodConditions through which the Pod has or has not passed



The lastProbeTime 
field provides a timestamp for when the Pod condition was last probed


lastProbeTime 
field provides a timestamp for when the Pod condition was last probed

lastTransitionTime 
field provides a timestamp for when the Pod last transitioned from one status to another.

The message 
field is a human-readable message indicating details about the transition.


Unschedulable: the scheduler cannot schedule the Pod right now, 
for example due to lack of resources or other constraints;


ContainersReady: all containers in the Pod are ready







my-readiness-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: my-readiness-pod
spec:
  containers:
  - name: myapp-container
    image: nginx
    readinessProbe:
      httpGet:
        path: /
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 5





my-liveness-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: my-liveness-pod
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', "echo Hello, Kubernetes! && sleep 3600"]
    livenessProbe:
      exec:
        command:
        - echo
        - testing
      initialDelaySeconds: 5
      periodSeconds: 5




Define a liveness HTTP request

Another kind of liveness probe uses an HTTP GET request. Here is the configuration 
file for a Pod that runs a container based on the k8s.gcr.io/liveness image


apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-http
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    args:
    - /server
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
        httpHeaders:
        - name: Custom-Header
          value: Awesome
      initialDelaySeconds: 3
      periodSeconds: 3


https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/liveness/server.go


In releases prior to v1.13 (including v1.13), if the environment variable http_proxy (or HTTP_PROXY) 
is set on the node where a pod is running, the HTTP liveness probe uses that proxy. 
In releases after v1.13, local HTTP proxy environment variable settings do not affect the HTTP liveness probe



Define a TCP liveness probe

A third type of liveness probe uses a TCP Socket. With this configuration, 
the kubelet will attempt to open a socket to your container on the specified port. 
If it can establish a connection, the container is considered healthy, if it can’t it is considered a failure




apiVersion: v1
kind: Pod
metadata:
  name: goproxy
  labels:
    app: goproxy
spec:
  containers:
  - name: goproxy
    image: k8s.gcr.io/goproxy:0.1
    ports:
    - containerPort: 8080
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 20



Use a named port

You can use a named ContainerPort for HTTP or TCP liveness checks:

ports:
- name: liveness-port
  containerPort: 8080
  hostPort: 8080

livenessProbe:
  httpGet:
    path: /healthz
    port: liveness-port




Define readiness probes

Sometimes, applications are temporarily unable to serve traffic. For example, an 
application might need to load large data or configuration files during startup, 
or depend on external services after startup. In such cases, you don’t want to kill 
the application, but you don’t want to send it requests either. Kubernetes provides 
readiness probes to detect and mitigate these situations. A pod with containers reporting that 
they are not ready does not receive traffic through Kubernetes Services.





Readiness probes are configured similarly to liveness probes. The only difference is that
you use the readinessProbe field instead of the livenessProbe field.

readinessProbe:
  exec:
    command:
    - cat
    - /tmp/healthy
  initialDelaySeconds: 5
  periodSeconds: 5




InitialDelaySeconds: Number of seconds after the container has started before liveness or readiness probes are initiated.
periodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
timeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
successThreshold: Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness. Minimum value is 1.
failureThreshold: When a Pod starts and the probe fails, Kubernetes will try failureThreshold
times before giving up. Giving up in case of liveness probe means restarting the Pod.
In case of readiness probe the Pod will be marked Unready. Defaults to 3. Minimum value is 1.


HTTP probes have additional fields that can be set on httpGet:

host: Host name to connect to, defaults to the pod IP. You probably want to set “Host” in httpHeaders instead.
scheme: Scheme to use for connecting to the host (HTTP or HTTPS). Defaults to HTTP.
path: Path to access on the HTTP server.
httpHeaders: Custom headers to set in the request. HTTP allows repeated headers.
port: Name or number of the port to access on the container. Number must be in the range 1 to 65535.


Define a liveness command

apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-exec
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/busybox
    args:
    - /bin/sh
    - -c
    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5




















