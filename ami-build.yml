---
- name: Manage EC2 Auto Scaling with CPU Utilization Based Scaling Policy
  hosts: localhost
  gather_facts: no
  vars:
    region: "ap-south-1"
    instance_id_to_copy_ami: "i-0"
    ami_name: "ami-07ea"
    asg_name: "my-auto-scaling-group"
    launch_template_name: "my-launch-template"
    scaling_policy_name: "scale-up-policy"
    scale_up_adjustment: 1
    cpu_threshold: 80
    cpu_alarm_name: "cpu-utilization-alarm"
    subnet_id: "subnet-0305"
    key_name: "ag-key"
    instance_type: "t2.small"
    account_id: "891377203384"
    zone: "ap-south-1a"
    security_groups: "ag_ag-prod_lb-asg_sg_ecs"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 80
          delete_on_termination: true
    user_data: |
      #!/bin/bash
      touch /tmp/helo.txt

  tasks:
    - name: Gather facts including date and time
      ansible.builtin.setup:
        gather_subset:
          - date_time

    - name: Find the latest AMI with name pattern starting with 'test'
      amazon.aws.ec2_ami_info:
        region: "{{ region }}"
        owners: "self"
        filters:
          name: "test-*"
          state: "available"
      register: ami_info

    - name: Debug available AMIs matching pattern
      debug:
        msg: "Matching AMIs: {{ ami_info.images | map(attribute='name') | list }}"

    - name: Sort and find the latest AMI
      set_fact:
        latest_ami: "{{ ami_info.images | sort(attribute='creation_date') | last }}"

    - name: Debug the latest AMI details
      debug:
        msg: "Latest AMI is {{ latest_ami.name }} with ID {{ latest_ami.image_id }}"

    - name: Build Ami
      amazon.aws.ec2_ami:
        region: "{{ region }}"
        instance_id: "{{ instance_id_to_copy_ami }}"
        name: "test-{{ ansible_facts['date_time']['date'] }}-{{ ansible_facts['date_time']['hour'] }}-{{ ansible_facts['date_time']['minute'] }}"
        description: "Testing AMI creation"
      register: ami_creation
      async: 300
      poll: 0


    - name: Print the value of the created AMI
      debug:
        var: ami_creation


    - name: Wait for AMI creation to complete
      amazon.aws.ec2_ami_info:
        region: "{{ region }}"
        owners: "{{ account_id }}"
        filters:
          name: "test-*"
      register: ami_facts
      until: 
       - ami_facts.images | length > 0
       - ami_facts.images[0].state == 'available'
      retries: 10
      delay: 30
      poll: 0  # Run asynchronously
      no_log: false   





    - name: Launch new instance
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        security_group: "{{ security_groups }}"
        image_id: "{{ ami_facts.images[0].image_id }}"
        instance_type: "{{ instance_type }}"
        vpc_subnet_id: "{{ subnet_id }}"
        tags:
          Name: "dev-instance"
        volumes: "{{ volumes }}"
        user_data: "{{ user_data }}"
      register: ec2

    - name: Add new instances to host group
      add_host:
        name: "{{ item.private_ip_address }}"
        groups:
          - group1
      loop: "{{ ec2.instances }}"
