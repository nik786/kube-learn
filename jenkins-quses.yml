
1.

pipeline {
  agent any 
  stages {
    stage('Build') {
      steps{
         // build description
       }
}
     stage('Test') {
      steps {
        // run tests
         }
      }
    stage('Deploy') {
     steps {
       // deploy
    
      }
}
}
}

2.
pipeline {
  agent {docker { image 'node:14-alpine'}} 
  stages {
    stage('Build') {
      steps{
         // build description
       }
}
     stage('Test') {
      steps {
        // run tests
         }
      }
    stage('Deploy') {
     steps {
       // deploy
    
      }
}
}
}


3.

pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        // build description
      }
    }
    stage('Test & Deploy') {
      parallel {
        stage('Test') {
          steps {
            // run tests
          }
        }
        stage('Deploy') {
          steps {
            // deploy
          }
        }
      }
    }
  }
}


4.

pipeline {
    agent any
    parameters {
        choice(name: 'STAGES_TO_RUN', choices: ['Stage1', 'Stage2', 'Stage3', 'Stage4', 'Stage5', 'Stage6', 'Stage7', 'Stage8', 'Stage9', 'Stage10'], description: 'Select stages to run', multipleChoice: true)
    }
    stages {
        stage('Stage 1') {
            when {
                expression { 'Stage1' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 1'
            }
        }
        stage('Stage 2') {
            when {
                expression { 'Stage2' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 2'
            }
        }
        stage('Stage 3') {
            when {
                expression { 'Stage3' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 3'
            }
        }
        stage('Stage 4') {
            when {
                expression { 'Stage4' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 4'
            }
        }
        stage('Stage 5') {
            when {
                expression { 'Stage5' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 5'
            }
        }
        stage('Stage 6') {
            when {
                expression { 'Stage6' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 6'
            }
        }
        stage('Stage 7') {
            when {
                expression { 'Stage7' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 7'
            }
        }
        stage('Stage 8') {
            when {
                expression { 'Stage8' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 8'
            }
        }
        stage('Stage 9') {
            when {
                expression { 'Stage9' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 9'
            }
        }
        stage('Stage 10') {
            when {
                expression { 'Stage10' in params.STAGES_TO_RUN }
            }
            steps {
                echo 'Running Stage 10'
            }
        }
    }
}









How to connect jenkins with kubernetes

create secret
kubectl create secret generic jenkins-token



create service account
kubectl create serviceaccount jenkins
 
Enable automountServiceAccountToken for the jenkins Service Account
kubectl patch serviceaccount jenkins -p '{"automountServiceAccountToken": true}'

Patch the jenkins-token Secret to Associate it with the jenkins Service Account
kubectl patch secret jenkins-token -p '{"metadata": {"annotations": {"kubernetes.io/service-account.name": "jenkins"}}}'


kubectl get secret jenkins-token -o yaml

copy the secret token

switch to jenkins
then switch credentials
add credentials
select secret text
then save it


install k8s plugin

Manage Jenkins - Cloud

Name: Kubernetes
KubernetesUrl: https://192.168.56.8:6443
Kubernetes namespace: default
Credentials: select the created credntials which has service account token
Use Pod Label to identify it


Other option
------------
Use kubeconfig file

kubectl config use-context
kubectl config --kubeconfig=/root/my-kube-config use-context research
kubectl config --kubeconfig=/root/my-kube-config current-context



A stateless app does not retain any client session or data between requests, 
while a stateful app maintains client-specific data or session information across multiple interactions






How to connect S3 bucket in eks cluster

Create an Amazon EKS cluster
Create Amazon S3 buckets
Create an IAM policy to allow access to Amazon S3 buckets
Create an IAM OIDC provider for the EKS Cluster
Create an IAM role, Service Account and link them
Install Mountpoint for Amazon S3 CSI driver
Deploy a sample application and Test
Cleaning up


aws eks describe-cluster --name cluster_name --query "cluster.identity.oidc.issuer" --output text


aws iam list-open-id-connect-providers | grep EXAMPLED539D4633E53DE1B716D3041E


eksctl utils associate-iam-oidc-provider --cluster cluster_name --approve

aws iam create-policy --policy-name "aws-s3-mountpoint-policy" --policy-document file://iam-policy.json

eksctl create iamserviceaccount --name s3-mount-sa --namespace s3-mount --cluster <cluster_name> --role-name <s3 role name> --attach-policy-arn <arn of aws-s3-mountpoint-policy> --approve




apiVersion: v1
kind: Pod
metadata:
  name: s3-mount-pod-02
  namespace: s3-mount
spec:
  serviceAccountName: s3-mount-sa
  hostNetwork: true
  containers:
    - name: app
      image: amazonlinux
      command: ["/bin/sh"]
      args: ["-c", "while true; do echo $(date -u) >> /example/out.txt; sleep 5; done"]
      securityContext:
        privileged: true


yum install unzip -y
yum install wget -y
yum install util-linux-ng -y
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
yum install -y ./mount-s3.rpm

mount-s3 aws-s3-mountpoint-eks-01 /s3-mountpoint








