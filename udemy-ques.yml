
PRACTICE TEST COMMANDS AND ARGUMENTS


1. Create a pod with the ubuntu image to run a container to sleep for 5000 seconds. 
Modify the file ubuntu-sleeper-2.yaml.

Note: Only make the necessary changes. Do not modify the name.

Pod Name: ubuntu-sleeper-2
Command: sleep 5000


2.
Create a pod using the file named ubuntu-sleeper-3.yaml. There is something wrong with it. Try to fix it!

Note: Only make the necessary changes. Do not modify the name.

Pod Name: ubuntu-sleeper-3
Command: sleep 1200

3.

Inspect the file Dockerfile given at /root/webapp-color directory. What command is run at container startup?

ROM python:3.6-alpine

RUN pip install flask

COPY . /opt/

EXPOSE 8080

WORKDIR /opt

ENTRYPOINT ["python", "app.py"]

CMD ["--color", "red"]

4.
Inspect the two files under directory webapp-color-2. What command is run at container startup?

Assume the image was created from the Dockerfile in this folder.


5.
Inspect the two files under directory webapp-color-3. What command is run at container startup?

Assume the image was created from the Dockerfile in this folder.

6.

Create a pod with the given specifications. By default it displays a blue background. 
Set the given command line arguments to change it to green

Pod Name: webapp-green
Image: kodekloud/webapp-color
Command line arguments: --color=green



apiVersion: v1 
kind: Pod 
metadata:
  name: webapp-green
  labels:
      name: webapp-green 
spec:
  containers:
  - name: simple-webapp
    image: kodekloud/webapp-color
    args: ["--color", "green"]





PRACTICE TEST ENV VARIABLES
1.
Create a new ConfigMap for the webapp-color POD. Use the spec given below.
ConfigName Name: webapp-config-map
Data: APP_COLOR=darkblue


2.
Update the environment variable on the POD to use the newly created ConfigMap
Note: Delete and recreate the POD. Only make the necessary changes. Do not modify the name of the Pod.

Pod Name: webapp-color
EnvFrom: webapp-config-map

3.


PRACTICE TEST SECRETS
Create a new secret named db-secret with the data given below.
You may follow any one of the methods discussed in lecture to create the secret.

Secret Name: db-secret
Secret 1: DB_Host=sql01
Secret 2: DB_User=root
Secret 3: DB_Password=password123

4.
Configure webapp-pod to load environment variables from the newly created secret.

Delete and recreate the pod if required.

Pod name: webapp-pod
Image name: kodekloud/simple-webapp-mysql
Env From: Secret=db-secret



PRACTICE TEST â€“ MULTI CONTAINER PODS

1.
Create a multi-container pod with 2 containers.
Use the spec given below.
If the pod goes into the crashloopbackoff then add sleep 1000 in the lemon container.

Name: yellow
Container 1 Name: lemon
Container 1 Image: busybox
Container 2 Name: gold
Container 2 Image: redis


2.

- env:
    - name: discovery.type
      value: single-node



Edit the pod to add a sidecar container to send logs to Elastic Search. Mount the log volume to the sidecar container.



Only add a new container. Do not modify anything else. Use the spec provided below.


Name: app
Container Name: sidecar
Container Image: kodekloud/filebeat-configured
Volume Mount: log-volume
Mount Path: /var/log/event-simulator/
Existing Container Name: app
Existing Container Image: kodekloud/event-simulator



PRACTICE TEST ROLLING UPDATES AND ROLLBACKS

Deployment Rolling Strategy

1.

Let us try that. Upgrade the application by setting the image on the deployment to kodekloud/webapp-color:v2

Do not delete and re-create the deployment. Only set the new image name for the existing deployment.

Deployment Name: frontend
Deployment Image: kodekloud/webapp-color:v2

2.

Change the deployment strategy to Recreate

Delete and re-create the deployment if necessary. Only update the strategy type for the existing deployment.

Deployment Name: frontend
Deployment Image: kodekloud/webapp-color:v2
Strategy: Recreate

3.

Upgrade the application by setting the image on the deployment to kodekloud/webapp-color:v3
Do not delete and re-create the deployment. Only set the new image name for the existing deployment.

Deployment Name: frontend
Deployment Image: kodekloud/webapp-color:v3

4.
You are requested to change the URLs at which the applications are made available.
Make the video application available at /stream


Ingress: ingress-wear-watch
Path: /stream
Backend Service: video-service
Backend Service Port: 8080

5.


You are requested to add a new path to your ingress to make the food delivery application available to your customers.
Make the new application available at /eat.



Ingress: ingress-wear-watch
Path: /eat
Backend Service: food-service
Backend Service Port: 8080


6.

View the Payment application using the /pay URL in your browser.
Click on the Ingress tab above your terminal, if its not open already, and append /pay to the URL in the browser.



