1. command to create a deployment and service to expose web front
   kubectl -n lab create deployment web --image=nginx:1.7.8 --dry-run -o yaml > web-deploy.yml
   kubect apply -f web-deploy.yml

2. command to scale up your deployment 
   kubectl -n lab  scale deployment/web --replicas=1

3. command to create yaml for a service
   kubectl expose deployment/web --port=80 --target-port=80 --type=NodePort --dry-run -o yaml > web-svc.yml
   kubectl apply -f web-svc.yml
4. Testing
   kubectl -n lab run busybox --rm -it --image=busybox /bin/bash
   wget -O- podip:80
   wget --spider --timeout=1 web-svc

5. create a db to serve as  backend db
   kubectl -n lab run db-redis --image=redis --restart=Never

6. create a network policy which will deny communication default
   cat np.yml

   apiVersion: networking.k8s.io/v1
   kind: NetworkPolicy
   metadata:
     name: default-deny
     namespace: lab
   spec:  
     podSelector: {}
     policyTypes:
     - Ingress  

7. Verify communication has been disabled 
   kubectl run busybox --rm -it --image=busybox /bin/bash 
   wget -O- podip:80

8. Apply the labels and create a communication over port 6379 to the database server.
   kubectl get po -n lab
   kubectl -n lab label po web role=frontend
   kubectl -n lab label po db-redis role=backend
   kubectl -n lab get po --show-labels

9. use following yaml to create np for communication b/w two labelled pods
   cat np-accessyml
   apiVersion: networking.k8s.io/v1
   kind: NetworkPolicy
   metadata:
     name: redis-netpolicy
     namespace: lab
   spec:
     podSelector:
       matchLabels: 
         role: db
     ingress: 
     - from:
       - podSelector:
          matchLabels:
            role: frontend
     ports:       
     - port: 6379

10. kubectl get netpol
    kubectl describe netpol redis-netpolicy
    kubectl get po --show-labels














   




