Sum of Even Fibonacci Numbers [10 pts]
Write a program python to calculate the sum of the first 100 Fibonacci 
numbers that are even. Ensure efficiency and demonstrate good coding practices.

1.
fibo=[0,1]
for i in range (50):
    fibo.append(fibo[-1]+fibo[-2])

print fibo


2.

def fibonacci_sum(n):
    fib_sum = 0
    a, b = 0, 1
    for _ in range(n):
        fib_sum += a  # Add the current Fibonacci number to the sum
        a, b = b, a + b  # Generate the next Fibonacci number
    return fib_sum

# Calculate the sum of the first 100 Fibonacci numbers
sum_of_fibonacci = fibonacci_sum(100)
print("Sum of the first 100 Fibonacci numbers:", sum_of_fibonacci)


Intersection of Sorted Arrays [10 pts]
Write a function in a Object Orientated Programming language of your choice that takes two 
sorted arrays of integers as input and returns an array containing numbers common to both arrays without duplicates.


import numpy as np

def intersection_sorted_arrays(arr1, arr2):
    # Convert arrays to NumPy arrays
    arr1_np = np.array(arr1)
    arr2_np = np.array(arr2)

    # Find common elements using set intersection
    intersection = np.intersect1d(arr1_np, arr2_np)

    return intersection.tolist()  # Convert back to a Python list

# Example usage:
arr1 = [1, 3, 4, 6, 9, 11]
arr2 = [2, 3, 5, 6, 7, 11, 12]
result = intersection_sorted_arrays(arr1, arr2)
print("Intersection of the arrays:", result)


Write a function in an Object Orientated Programming language of your choice that, when passed a decimal digit X, 
calculates and returns the value of X + XX + XXX + XXXX. For example, if X is 3, the function should return 3702 (3 + 33 + 333 + 3333). 
Ensure the function handles valid inputs and provides meaningful error messages for invalid inputs.



import numpy as np

class DigitSumCalculator:
    def __init__(self):
        pass

    def calculate_digit_sum(self, X):
        # Validate input
        if not isinstance(X, int) or X < 0 or X > 9:
            raise ValueError("Input must be a decimal digit between 0 and 9")

        # Create an array of repeated X values
        X_values = np.array([int(str(X) * i) for i in range(1, 5)])

        # Calculate the sum
        digit_sum = np.sum(X_values)

        return digit_sum

# Example usage:
calculator = DigitSumCalculator()
try:
    result = calculator.calculate_digit_sum(3)
    print("Result:", result)
except ValueError as e:
    print("Error:", e)


