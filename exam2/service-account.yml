User accounts are for humans. Service accounts are for processes, which run in pods
User accounts are intended to be global. Service accounts are namespaced

new user account creation requires special privileges and is tied to complex business processes. 
Service account creation is intended to be more lightweight,allowing cluster users to create service accounts 
for specific tasks

Three separate components cooperate to implement the automation around service accounts:

A Service account admission controller
A Token controller
A Service account controller

If the pod does not contain any ImagePullSecrets, then ImagePullSecrets of the ServiceAccount are added to the pod.
It adds a volume to the pod which contains a token for API access.
It adds a volumeSource to each container of the pod mounted 
at /var/run/secrets/kubernetes.io/serviceaccount.
Starting from v1.13, you can migrate a service account 
volume to a projected volume when the BoundServiceAccountTokenVolume feature gate is enabled


Token Controller
TokenController runs as part of controller-manager. It acts asynchronously. It:

observes serviceAccount creation and creates a corresponding Secret to allow API access.
observes serviceAccount deletion and deletes all corresponding ServiceAccountToken Secrets.


You must pass a service account private key file to the token controller in the 
controller-manager by using the --service-account-private-key-file option. 
The private key will be used to sign generated service account tokens. 
Similarly, you must pass the corresponding public key to the kube-apiserver
using the --service-account-key-file option

kubectl create serviceaccount my-serviceaccount

apiVersion: v1
kind: Pod
metadata:
  name: my-serviceaccount-pod
spec:
  serviceAccountName: my-serviceaccount
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', "echo Hello, Kubernetes! && sleep 3600"]
    
    
Manually create a service account API token

kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: build-robot-secret
  annotations:
    kubernetes.io/service-account.name: build-robot
type: kubernetes.io/service-account-token
EOF


Add ImagePullSecrets to a service account

Creating a Secret with a Docker Config

kubectl create secret docker-registry <name> --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL

cat <<EOF > pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: foo
  namespace: awesomeapps
spec:
  containers:
    - name: foo
      image: janedoe/awesomeapp:v1
  imagePullSecrets:
    - name: myregistrykey
EOF

cat <<EOF >> ./kustomization.yaml
resources:
- pod.yaml
EOF


This needs to be done for each pod that is using a private registry.

If you need access to multiple registries, you can create one secret for each registry. 
Kubelet will merge any imagePullSecrets into a single virtual .docker/config.jso



Add ImagePullSecrets to a service account

kubectl get secrets myregistrykey

kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}'

kubectl get serviceaccounts default -o yaml > ./sa.yaml

kubectl replace serviceaccount default -f ./sa.yaml


kind: Pod
apiVersion: v1
metadata:
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    volumeMounts:
    - mountPath: /var/run/secrets/tokens
      name: vault-token
  serviceAccountName: build-robot
  volumes:
  - name: vault-token
    projected:
      sources:
      - serviceAccountToken:
          path: vault-token
          expirationSeconds: 7200
          audience: vault
          
          
          





